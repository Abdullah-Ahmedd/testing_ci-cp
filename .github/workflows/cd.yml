name: CD - Build and Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up MSVC (Visual Studio Dev Command Prompt)
      uses: ilammy/msvc-dev-cmd@v1

    - name: Build Release Binaries
      shell: cmd
      run: |
        echo Building release binaries...
        
        set SQLITE_FLAGS=/DSQLITE_OMIT_LOAD_EXTENSION /DSQLITE_ENABLE_RTREE /DSQLITE_ENABLE_FTS3
        set COMMON_FLAGS=/EHsc /std:c++17
        set WARNING_FLAGS=/W3 /wd4996 /wd4244 /wd4267 /wd4018
        set RELEASE_FLAGS=/O2 /DNDEBUG

        echo Building release executable...
        cl %COMMON_FLAGS% %WARNING_FLAGS% %SQLITE_FLAGS% %RELEASE_FLAGS% /Fe:testing_ci-cp.exe main.cpp sqlite3.c

        echo Building debug executable...
        cl %COMMON_FLAGS% %WARNING_FLAGS% %SQLITE_FLAGS% /Zi /DDEBUG /Fe:testing_ci-cp_debug.exe main.cpp sqlite3.c

    - name: Create release directory structure
      shell: powershell
      run: |
        New-Item -ItemType Directory -Force -Path "release"
        New-Item -ItemType Directory -Force -Path "release/bin"
        New-Item -ItemType Directory -Force -Path "release/src"
        
        # Copy executables
        Copy-Item "testing_ci-cp.exe" "release/bin/"
        Copy-Item "testing_ci-cp_debug.exe" "release/bin/"
        
        # Copy source files
        Copy-Item "main.cpp" "release/src/"
        Copy-Item "sqlite3.h" "release/src/"
        Copy-Item "sqlite3.c" "release/src/"
        
        # Create README for release
        @"
        # testing_ci-cp Release
        
        This release contains:
        - `bin/testing_ci-cp.exe` - Optimized release build
        - `bin/testing_ci-cp_debug.exe` - Debug build with symbols
        - `src/` - Source code files
        
        ## Usage
        Run the executable from the bin directory:
        ```
        ./bin/testing_ci-cp.exe
        ```
        
        Built with SQLite $(sqlite3 --version 2>$null || echo "embedded")
        "@ | Out-File -FilePath "release/README.md" -Encoding utf8

    - name: Test executables
      shell: powershell
      timeout-minutes: 1
      continue-on-error: true
      run: |
        cd release/bin
        $executables = @("testing_ci-cp.exe", "testing_ci-cp_debug.exe")
        foreach ($exe in $executables) {
          Write-Host "Testing $exe..."
          if (Test-Path $exe) {
            try {
              $p = Start-Process -FilePath ".\$exe" -Wait -PassThru -NoNewWindow -TimeoutSec 10
              Write-Host "$exe completed with exit code $($p.ExitCode)"
            } catch {
              Write-Host "$exe test completed (may require user input)"
            }
          } else {
            Write-Host "ERROR: $exe not found!"
            exit 1
          }
        }

    - name: Create Windows ZIP archive
      shell: powershell
      run: |
        $version = if ($env:GITHUB_EVENT_NAME -eq "workflow_dispatch") { 
          "${{ github.event.inputs.version }}" 
        } elseif ($env:GITHUB_REF -like "refs/tags/*") { 
          $env:GITHUB_REF -replace "refs/tags/", ""
        } else { 
          "latest" 
        }
        
        $archiveName = "testing_ci-cp_windows_$version.zip"
        Compress-Archive -Path "release/*" -DestinationPath $archiveName
        
        Write-Host "Created archive: $archiveName"
        echo "ARCHIVE_NAME=$archiveName" >> $env:GITHUB_ENV
        echo "VERSION=$version" >> $env:GITHUB_ENV

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-release-${{ env.VERSION }}
        path: |
          ${{ env.ARCHIVE_NAME }}
          release/
        retention-days: 30

    outputs:
      archive-name: ${{ env.ARCHIVE_NAME }}
      version: ${{ env.VERSION }}

  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Build Release Binaries
      run: |
        echo "Building Linux release binaries..."
        
        # Build release version
        g++ -std=c++17 -O2 -DNDEBUG -DSQLITE_OMIT_LOAD_EXTENSION -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 \
            -o testing_ci-cp main.cpp sqlite3.c -lpthread -ldl
        
        # Build debug version
        g++ -std=c++17 -g -DDEBUG -DSQLITE_OMIT_LOAD_EXTENSION -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 \
            -o testing_ci-cp_debug main.cpp sqlite3.c -lpthread -ldl

    - name: Create release directory structure
      run: |
        mkdir -p release/bin release/src
        
        # Copy executables
        cp testing_ci-cp release/bin/
        cp testing_ci-cp_debug release/bin/
        
        # Copy source files
        cp main.cpp sqlite3.h sqlite3.c release/src/
        
        # Make executables executable
        chmod +x release/bin/testing_ci-cp
        chmod +x release/bin/testing_ci-cp_debug
        
        # Create README
        cat > release/README.md << 'EOF'
        # testing_ci-cp Release (Linux)
        
        This release contains:
        - `bin/testing_ci-cp` - Optimized release build
        - `bin/testing_ci-cp_debug` - Debug build with symbols
        - `src/` - Source code files
        
        ## Usage
        Run the executable from the bin directory:
        ```bash
        ./bin/testing_ci-cp
        ```
        
        Make sure the binary is executable:
        ```bash
        chmod +x bin/testing_ci-cp
        ```
        EOF

    - name: Test executables
      timeout-minutes: 1
      continue-on-error: true
      run: |
        cd release/bin
        for exe in testing_ci-cp testing_ci-cp_debug; do
          echo "Testing $exe..."
          if [ -f "$exe" ]; then
            timeout 10s ./$exe || echo "$exe test completed (may require user input)"
          else
            echo "ERROR: $exe not found!"
            exit 1
          fi
        done

    - name: Create Linux TAR archive
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION="${{ github.ref#refs/tags/ }}"
        else
          VERSION="latest"
        fi
        
        ARCHIVE_NAME="testing_ci-cp_linux_${VERSION}.tar.gz"
        tar -czf "$ARCHIVE_NAME" -C release .
        
        echo "Created archive: $ARCHIVE_NAME"
        echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-release-${{ env.VERSION }}
        path: |
          ${{ env.ARCHIVE_NAME }}
          release/
        retention-days: 30

    outputs:
      archive-name: ${{ env.ARCHIVE_NAME }}
      version: ${{ env.VERSION }}

  create-release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-release-${{ needs.build-windows.outputs.version }}

    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-release-${{ needs.build-linux.outputs.version }}

    - name: Generate release notes
      run: |
        cat > RELEASE_NOTES.md << 'EOF'
        ## 🚀 Release Notes
        
        ### What's New
        - SQLite C++ application built for Windows and Linux
        - Optimized release builds with SQLite extensions enabled
        - Debug builds available for development
        
        ### 📦 Downloads
        - **Windows**: `testing_ci-cp_windows_*.zip`
        - **Linux**: `testing_ci-cp_linux_*.tar.gz`
        
        ### 🔧 Build Information
        - **Compiler**: MSVC (Windows), GCC (Linux)
        - **SQLite Features**: RTREE, FTS3 enabled
        - **C++ Standard**: C++17
        
        ### 📋 Contents
        Each archive contains:
        - `bin/` - Executable files (release + debug)
        - `src/` - Source code
        - `README.md` - Usage instructions
        
        ### 🏃‍♂️ Quick Start
        1. Download the appropriate archive for your platform
        2. Extract the archive
        3. Run `./bin/testing_ci-cp` (Linux) or `bin\testing_ci-cp.exe` (Windows)
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.build-windows.outputs.version }}
        name: Release ${{ needs.build-windows.outputs.version }}
        body_path: RELEASE_NOTES.md
        files: |
          ${{ needs.build-windows.outputs.archive-name }}
          ${{ needs.build-linux.outputs.archive-name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-completion:
    needs: [build-windows, build-linux, create-release]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Report build status
      run: |
        echo "🏗️ Build Status Report"
        echo "====================="
        echo "Windows Build: ${{ needs.build-windows.result }}"
        echo "Linux Build: ${{ needs.build-linux.result }}"
        echo "Release Creation: ${{ needs.create-release.result }}"
        echo ""
        
        if [ "${{ needs.build-windows.result }}" = "success" ] && [ "${{ needs.build-linux.result }}" = "success" ]; then
          echo "✅ All builds completed successfully!"
          if [ "${{ needs.create-release.result }}" = "success" ]; then
            echo "🎉 Release ${{ needs.build-windows.outputs.version }} created successfully!"
          fi
        else
          echo "❌ Some builds failed. Check the logs above."
          exit 1
        fi
