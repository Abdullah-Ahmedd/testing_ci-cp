name: CD - Build and Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up MSVC
      uses: ilammy/msvc-dev-cmd@v1

    - name: Build Release Binaries
      shell: cmd
      run: |
        set SQLITE_FLAGS=/DSQLITE_OMIT_LOAD_EXTENSION /DSQLITE_ENABLE_RTREE /DSQLITE_ENABLE_FTS3
        set COMMON_FLAGS=/EHsc /std:c++17
        set WARNING_FLAGS=/W3 /wd4996 /wd4244 /wd4267 /wd4018
        set RELEASE_FLAGS=/O2 /DNDEBUG

        cl %COMMON_FLAGS% %WARNING_FLAGS% %SQLITE_FLAGS% %RELEASE_FLAGS% /Fe:testing_ci-cp.exe main.cpp sqlite3.c
        cl %COMMON_FLAGS% %WARNING_FLAGS% %SQLITE_FLAGS% /Zi /DDEBUG /Fe:testing_ci-cp_debug.exe main.cpp sqlite3.c
        copy testing_ci-cp.exe main.exe

    - name: Create release directory
      shell: powershell
      run: |
        mkdir release\bin
        mkdir release\src
        Copy-Item testing_ci-cp.exe release\bin\
        Copy-Item testing_ci-cp_debug.exe release\bin\
        Copy-Item main.exe release\bin\
        Copy-Item main.cpp release\src\
        Copy-Item sqlite3.h release\src\
        Copy-Item sqlite3.c release\src\
        Set-Content -Path release\README.md -Value @"
# testing_ci-cp Release

This release contains:
- bin/testing_ci-cp.exe - Optimized release build
- bin/testing_ci-cp_debug.exe - Debug build
- bin/main.exe - Copy of release build
- src/ - Source code

Run from bin directory:
./bin/testing_ci-cp.exe
"@

    - name: Create ZIP Archive
      shell: powershell
      run: |
        $version = "${{ github.event.inputs.version || github.ref_name || 'latest' }}"
        $archiveName = "testing_ci-cp_windows_${version}.zip"
        Compress-Archive -Path release/* -DestinationPath $archiveName
        echo "ARCHIVE_NAME=$archiveName" >> $env:GITHUB_ENV
        echo "VERSION=$version" >> $env:GITHUB_ENV

    - name: Upload Windows Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-release-${{ env.VERSION }}
        path: |
          ${{ env.ARCHIVE_NAME }}
          release/
        retention-days: 30

    outputs:
      archive-name: ${{ env.ARCHIVE_NAME }}
      version: ${{ env.VERSION }}

  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install build tools
      run: sudo apt update && sudo apt install -y build-essential

    - name: Build Linux Binaries
      run: |
        g++ -std=c++17 -O2 -DNDEBUG -DSQLITE_OMIT_LOAD_EXTENSION -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 \
          -o testing_ci-cp main.cpp sqlite3.c -lpthread -ldl
        g++ -std=c++17 -g -DDEBUG -DSQLITE_OMIT_LOAD_EXTENSION -DSQLITE_ENABLE_RTREE -DSQLITE_ENABLE_FTS3 \
          -o testing_ci-cp_debug main.cpp sqlite3.c -lpthread -ldl
        cp testing_ci-cp main

    - name: Create release directory
      run: |
        mkdir -p release/bin release/src
        cp testing_ci-cp release/bin/
        cp testing_ci-cp_debug release/bin/
        cp main release/bin/
        cp main.cpp sqlite3.h sqlite3.c release/src/
        chmod +x release/bin/*
        cat > release/README.md <<EOF
# testing_ci-cp Release (Linux)

This release contains:
- bin/testing_ci-cp - Optimized release build
- bin/testing_ci-cp_debug - Debug build
- bin/main - Copy of release build
- src/ - Source code

Run from bin:
./bin/testing_ci-cp
EOF

    - name: Create TAR Archive
      run: |
        VERSION="${{ github.event.inputs.version || github.ref_name || 'latest' }}"
        ARCHIVE_NAME="testing_ci-cp_linux_${VERSION}.tar.gz"
        tar -czf "$ARCHIVE_NAME" -C release .
        echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Upload Linux Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-release-${{ env.VERSION }}
        path: |
          ${{ env.ARCHIVE_NAME }}
          release/
        retention-days: 30

    outputs:
      archive-name: ${{ env.ARCHIVE_NAME }}
      version: ${{ env.VERSION }}

  create-release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-release-${{ needs.build-windows.outputs.version }}

    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-release-${{ needs.build-linux.outputs.version }}

    - name: Generate Release Notes
      run: |
        cat > RELEASE_NOTES.md <<EOF
## ðŸš€ Release Notes

- SQLite C++ Console App
- Includes release + debug + main executables
- Works on Windows and Linux

### ðŸ“¦ Contents
- bin/
- src/
- README.md
EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.build-windows.outputs.version }}
        name: Release ${{ needs.build-windows.outputs.version }}
        body_path: RELEASE_NOTES.md
        files: |
          ${{ needs.build-windows.outputs.archive-name }}
          ${{ needs.build-linux.outputs.archive-name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-completion:
    needs: [build-windows, build-linux, create-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Report Build Status
      run: |
        echo "Windows Build: ${{ needs.build-windows.result }}"
        echo "Linux Build: ${{ needs.build-linux.result }}"
        echo "Release: ${{ needs.create-release.result }}"
