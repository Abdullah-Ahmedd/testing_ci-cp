# .github/workflows/ci-cd.yml
name: CI/CD Pipeline for testing_ci-cp

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  BUILD_TYPE: Release
  ARTIFACT_NAME: testing_ci-cp

jobs:
  # Build and Test Job
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        compiler: [gcc, clang]
        exclude:
          - os: windows-latest
            compiler: clang
        include:
          - os: windows-latest
            compiler: msvc
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # Setup compilers
    - name: Setup GCC
      if: matrix.compiler == 'gcc' && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++ build-essential

    - name: Setup Clang
      if: matrix.compiler == 'clang'
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          sudo apt-get update
          sudo apt-get install -y clang
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          # Clang is pre-installed on macOS
          clang --version
        fi

    - name: Setup MSVC
      if: matrix.compiler == 'msvc' && matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1.3

    # Create build directory
    - name: Create Build Directory
      run: mkdir build

    # Configure build system
    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest' || matrix.compiler != 'msvc'
      working-directory: build
      run: |
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
        else
          cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
        fi

    - name: Configure CMake (Windows MSVC)
      if: matrix.compiler == 'msvc' && matrix.os == 'windows-latest'
      working-directory: build
      run: cmake .. -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    # Build the project
    - name: Build Project
      working-directory: build
      run: cmake --build . --config ${{ env.BUILD_TYPE }}

    # Run tests
    - name: Run Tests
      working-directory: build
      run: ctest --output-on-failure --build-config ${{ env.BUILD_TYPE }}

    # Static Analysis with cppcheck (Linux only)
    - name: Install cppcheck
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc'
      run: sudo apt-get install -y cppcheck

    - name: Run Static Analysis
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc'
      run: |
        cppcheck --enable=all --inconclusive --xml --xml-version=2 . 2> cppcheck-report.xml || true
        
    - name: Upload Static Analysis Results
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc'
      uses: actions/upload-artifact@v4
      with:
        name: cppcheck-report
        path: cppcheck-report.xml

    # Upload build artifacts
    - name: Upload Build Artifacts (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}-${{ matrix.os }}-${{ matrix.compiler }}
        path: |
          build/${{ env.ARTIFACT_NAME }}
          build/main

    - name: Upload Build Artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}-${{ matrix.os }}-${{ matrix.compiler }}
        path: |
          build/${{ env.BUILD_TYPE }}/*.exe
          build/Debug/*.exe

  # Code Quality Job
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format clang-tidy

    # Check code formatting
    - name: Check Code Formatting
      run: |
        find . -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | xargs clang-format --dry-run --Werror

    # Run clang-tidy
    - name: Run Clang-Tidy
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        clang-tidy ../main.cpp -p . -- -std=c++17

  # Security Scan Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: cpp

    - name: Build for CodeQL
      run: |
        mkdir build
        cd build
        cmake ..
        cmake --build .

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Memory Check Job (Linux only)
  memory-check:
    name: Memory Check with Valgrind
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Valgrind
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind

    - name: Build Project
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug
        cmake --build .

    - name: Run Valgrind
      working-directory: build
      run: |
        valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./main || ./testing_ci-cp

  # Deploy Job (only on release)
  deploy:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security-scan]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release Package
      run: |
        mkdir release-package
        cp -r artifacts/* release-package/
        tar -czf ${{ env.ARTIFACT_NAME }}-${{ github.ref_name }}.tar.gz release-package/

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./${{ env.ARTIFACT_NAME }}-${{ github.ref_name }}.tar.gz
        asset_name: ${{ env.ARTIFACT_NAME }}-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

  # Notification Job
  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security-scan]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.build-and-test.result == 'success' && needs.code-quality.result == 'success' && needs.security-scan.result == 'success' }}
      run: echo "✅ All checks passed successfully!"

    - name: Notify Failure
      if: ${{ needs.build-and-test.result == 'failure' || needs.code-quality.result == 'failure' || needs.security-scan.result == 'failure' }}
      run: |
        echo "❌ Build pipeline failed!"
        exit 1
