name: C++ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release
  CPP_STANDARD: 17

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        compiler: [gcc, clang, msvc]
        build_type: [Debug, Release]
        exclude:
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            compiler: clang
          - os: ubuntu-latest
            compiler: msvc
          - os: macos-latest
            compiler: msvc
            
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.conan2
          build/_deps
          vcpkg_installed
        key: ${{ runner.os }}-${{ matrix.compiler }}-deps-${{ hashFiles('**/conanfile.txt', '**/CMakeLists.txt', '**/vcpkg.json') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.compiler }}-deps-

    - name: Setup C++ Environment (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y gcc-11 g++-11
          echo "CC=gcc-11" >> $GITHUB_ENV
          echo "CXX=g++-11" >> $GITHUB_ENV
        elif [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang-14 libc++-14-dev libc++abi-14-dev
          echo "CC=clang-14" >> $GITHUB_ENV
          echo "CXX=clang++-14" >> $GITHUB_ENV
        fi
        sudo apt-get install -y cmake ninja-build valgrind cppcheck

    - name: Setup C++ Environment (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          brew install gcc@11
          echo "CC=gcc-11" >> $GITHUB_ENV
          echo "CXX=g++-11" >> $GITHUB_ENV
        elif [ "${{ matrix.compiler }}" = "clang" ]; then
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        fi
        brew install cmake ninja cppcheck

    - name: Setup C++ Environment (Windows)
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1.3

    - name: Install Conan
      run: |
        pip install conan
        conan profile detect --force

    - name: Install vcpkg
      if: matrix.os == 'windows-latest'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        ./bootstrap-vcpkg.bat
        echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $GITHUB_ENV
        echo "${{ github.workspace }}/vcpkg" >> $GITHUB_PATH

    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_CXX_STANDARD=${{ env.CPP_STANDARD }} \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DBUILD_TESTING=ON \
          -DENABLE_COVERAGE=ON \
          -DENABLE_SANITIZERS=ON \
          -DENABLE_STATIC_ANALYSIS=ON

    - name: Build Project
      run: cmake --build build --config ${{ matrix.build_type }} --parallel $(nproc)

    - name: Run Static Analysis (cppcheck)
      if: matrix.os != 'windows-latest'
      continue-on-error: true
      run: |
        cppcheck --enable=all --std=c++${{ env.CPP_STANDARD }} \
                 --suppress=missingIncludeSystem \
                 --suppress=unusedFunction \
                 --suppress=unmatchedSuppression \
                 --inline-suppr \
                 --error-exitcode=1 \
                 --xml \
                 --output-file=cppcheck-report.xml \
                 src/ include/ 2>&1 || true

    - name: Run Tests
      working-directory: build
      run: ctest --output-on-failure --parallel $(nproc) --verbose

    - name: Run Memory Check (Valgrind)
      if: matrix.os == 'ubuntu-latest' && matrix.build_type == 'Debug'
      working-directory: build
      run: |
        valgrind --tool=memcheck \
                 --leak-check=full \
                 --show-leak-kinds=all \
                 --track-origins=yes \
                 --verbose \
                 --error-exitcode=1 \
                 ./tests/unit_tests || true

    - name: Generate Coverage Report
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc' && matrix.build_type == 'Debug'
      run: |
        sudo apt-get install -y lcov
        lcov --capture --directory build --output-file coverage.info
        lcov --remove coverage.info '/usr/*' '*/tests/*' '*/build/*' --output-file coverage_filtered.info
        lcov --list coverage_filtered.info

    - name: Upload Coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc' && matrix.build_type == 'Debug'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage_filtered.info
        flags: unittests
        name: codecov-umbrella

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      if: matrix.build_type == 'Release'
      with:
        name: cpp-build-${{ matrix.os }}-${{ matrix.compiler }}
        path: |
          build/bin/
          build/lib/
          build/*.exe

  format-check:
    name: Code Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install clang-format
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format-14

    - name: Check Code Formatting
      run: |
        find src include -name "*.cpp" -o -name "*.hpp" -o -name "*.c" -o -name "*.h" | \
        xargs clang-format-14 --dry-run --Werror

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Doxygen
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz

    - name: Generate Documentation
      run: |
        doxygen Doxyfile

    - name: Deploy Documentation
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/html

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: cpp

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test, format-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup C++ Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build gcc-11 g++-11

    - name: Build Release
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -GNinja
        cmake --build build --parallel

    - name: Package Release
      run: |
        cd build
        cpack

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          build/*.tar.gz
          build/*.zip
          build/*.deb
          build/*.rpm
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
