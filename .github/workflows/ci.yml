name: CI Build and Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install C++ compiler and build tools
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential g++ libsqlite3-dev sqlite3
        
    - name: List all C/C++ files
      run: |
        echo "üìÅ Scanning project structure..."
        echo "C++ Source files (.cpp):"
        find . -name "*.cpp" -type f | head -20
        echo "C Source files (.c):"
        find . -name "*.c" -type f | head -20
        echo "Header files (.h/.hpp):"
        find . -name "*.h" -o -name "*.hpp" -type f | head -20
        
    - name: Check for main.cpp
      run: |
        if [ -f "main.cpp" ]; then
          echo "‚úÖ Found main.cpp - will use as entry point"
        else
          echo "‚ùå No main.cpp found in root directory"
          echo "Available .cpp files:"
          find . -name "*.cpp" -type f
          exit 1
        fi
        
    - name: Compile all source files
      run: |
        echo "üî® Compiling project..."
        
        # Find all .cpp and .c files
        CPP_FILES=$(find . -name "*.cpp" -type f)
        C_FILES=$(find . -name "*.c" -type f)
        
        # Create compilation command
        COMPILE_CMD="g++ -std=c++17 -Wall -Wextra -Werror -o main"
        
        # Add all C++ files
        for file in $CPP_FILES; do
          echo "Adding C++ file: $file"
          COMPILE_CMD="$COMPILE_CMD $file"
        done
        
        # Add all C files
        for file in $C_FILES; do
          echo "Adding C file: $file"
          COMPILE_CMD="$COMPILE_CMD $file"
        done
        
        # Add common libraries (add more as needed)
        COMPILE_CMD="$COMPILE_CMD -lsqlite3 -lpthread -lm"
        
        echo "üìã Full compilation command:"
        echo "$COMPILE_CMD"
        echo ""
        
        # Execute compilation
        eval $COMPILE_CMD
        
    - name: Verify compilation success
      run: |
        if [ -f "./main" ]; then
          echo "‚úÖ Compilation successful - executable 'main' created"
          ls -la main
          echo "üìä Executable size: $(du -h main | cut -f1)"
        else
          echo "‚ùå Compilation failed - executable not found"
          exit 1
        fi
        
    - name: Check for syntax/header issues
      run: |
        echo "üîç Checking for common issues..."
        
        # Check for missing semicolons (basic check)
        if grep -n "std::cout.*<<.*[^;]$" *.cpp *.c 2>/dev/null; then
          echo "‚ö†Ô∏è  Potential missing semicolons found (check above lines)"
        fi
        
        # Check for basic header includes
        echo "üìã Header includes found:"
        grep -n "^#include" *.cpp *.c *.h *.hpp 2>/dev/null | head -10 || echo "No includes found in current directory"
        
    - name: Run the compiled program
      run: |
        echo "üöÄ Executing the program..."
        timeout 30s ./main || {
          EXIT_CODE=$?
          if [ $EXIT_CODE -eq 124 ]; then
            echo "‚ö†Ô∏è  Program timed out after 30 seconds"
          elif [ $EXIT_CODE -eq 0 ]; then
            echo "‚úÖ Program completed successfully"
          else
            echo "‚ö†Ô∏è  Program exited with code: $EXIT_CODE"
          fi
        }
        
    - name: Project summary
      run: |
        echo "üìä Project Summary:"
        echo "Total .cpp files: $(find . -name "*.cpp" -type f | wc -l)"
        echo "Total .c files: $(find . -name "*.c" -type f | wc -l)"  
        echo "Total .h files: $(find . -name "*.h" -type f | wc -l)"
        echo "Total .hpp files: $(find . -name "*.hpp" -type f | wc -l)"
        
        if [ -f "./main" ]; then
          echo "‚úÖ Build Status: SUCCESS"
        else
          echo "‚ùå Build Status: FAILED"
        fi
